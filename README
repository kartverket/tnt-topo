# TNT Topo - QGIS Project Files

## Overview
This repository contains QGIS project files for the TNT team's new Topographic map service. The project files define map layers, styling, and data sources for cartographic production.

## Main Project Files
- **data/Topo_2025.qgs** - Primary topographic map project file
- **data/TopoGraatone_2025.qgs** - Grayscale topographic map project file

## Test Project Files
These files are used for testing and development purposes and might be removed in the future:
- **data/enkel.qgs** - Simplified version with a reduced set of layers from the main project
- **data/earth.qgs** - Test file containing selected Natural Earth dataset layers

## Scripts
The `/scripts` directory contains utilities for managing QGIS project files:

- **clean_qgis_for_git.py** - Removes sensitive credentials from QGIS project files before committing to Git
- **qgis_handling.py** - Handles QGIS project operations including:
  - Reinserting passwords from environment variables
  - Extracting datasources
  - Replacing datasource connections
  - URL encoding for special characters
  - Extracting layers by datasource pattern
- **install_hooks.py** - Installs Git hooks for password protection

## Usage

### Installing Dependencies
```bash
pip install -r requirements.txt
```

### Installing Git Hooks
```bash
python scripts/install_hooks.py
```

### Cleaning Credentials
```bash
python scripts/clean_qgis_for_git.py -d ./data -v
```

### Working with Credentials
Passwords and sensitive data are managed through environment variables. Use the QGIS handling script to restore credentials when needed:

```bash
python scripts/qgis_handling.py --reinsert-passwords -v
```

## Development

### Git Hooks
A pre-commit hook is included to automatically check for credentials in QGIS files. To install it:

```bash
python scripts/install_hooks.py
```

### Contributing
For contributing to this repository:
1. Ensure your QGIS project files are cleaned of credentials before committing
2. Install the Git hooks to automatically prevent committing files with credentials
3. Use environment variables for storing sensitive data
4. Follow the code conventions from CLAUDE.md