# 🗺️ TNT Topo - Norwegian Topographic Map Services

![QGIS](https://img.shields.io/badge/QGIS-3.16+-green?logo=qgis)
![License](https://img.shields.io/badge/License-Norwegian%20Mapping%20Authority-orange)
![Layers](https://img.shields.io/badge/Layers-2016+-blue)
![Python](https://img.shields.io/badge/Python-3.7+-blue?logo=python)

> **Comprehensive QGIS project files for Norwegian topographic mapping services, including mainland Norway, Jan Mayen, and Svalbard territories.**

## 📋 Overview

This repository contains handling and setup for QGIS project files. 


### 🧪 Development & Testing
Development files for testing and experimentation:

| File | Description | Purpose |
|------|-------------|---------|
| **`data/enkel.qgs`** | 📋 Simplified layer subset | Testing, development |
| **`data/earth.qgs`** | 🌍 Natural Earth datasets | International context |

## 🚀 Quick Start

### Prerequisites
- **QGIS 3.16+** (LTR recommended) - [Download QGIS](https://qgis.org/download/)
- **Python 3.7+** for automation scripts
- **Network connection** for live data services
- **Git** for version control

### Getting Started
1. **Clone the repository**:
   ```bash
   git clone https://github.com/your-org/tnt-topo.git
   cd tnt-topo
   ```

2. **Install dependencies**:
   ```bash
   pip install -r requirements.txt
   ```

3. **Set up Git hooks** (recommended):
   ```bash
   python3 scripts/install_hooks.py
   ```

4. **Open a project in QGIS**:
   - Launch QGIS
   - Open `data/Topo_2025.qgs`
   - Wait for initial layer loading (2000+ layers)

### 🔧 Environment Setup
For database connections, set up environment variables:
```bash
export QGIS_DB_PASSWORD="your_database_password"
export QGIS_DB_USER="your_username"
```

## 📚 Documentation

### 🗂️ Layer Documentation
Comprehensive documentation with all layer specifications is available:
- **[📖 Full Layer Documentation](docs/Topo_2025.md)** - Complete technical specifications
- **[🎯 Quick Reference Guide](#)** - Essential layer information
- **[🗺️ Coverage Maps](#)** - Geographic extent and scale information

### 🛠️ Automation Tools

#### 📋 Layer Documentation Generator
Generates comprehensive documentation optimized for GitHub Wiki publishing:

```bash
# 🎯 Generate complete GitHub Wiki documentation
python3 scripts/document_qgis_layers.py ./data/Topo_2025.qgs \
  --output wiki/Topo-Documentation.md \
  --sidebar wiki/_Sidebar.md

# 📊 Generate without legends (faster)
python3 scripts/document_qgis_layers.py ./data/Topo_2025.qgs \
  --no-legends --output docs/Topo-Quick-Reference.md

# 🔧 Generate with custom QGIS Server configuration
python3 scripts/document_qgis_layers.py ./data/Topo_2025.qgs \
  --legend-base-url "https://your-qgis-server.com/qgis/" \
  --legend-map-file "/path/to/your/project.qgs" \
  --output wiki/Documentation.md

# 📈 Generate with CSV export for analysis
python3 scripts/document_qgis_layers.py ./data/Topo_2025.qgs \
  --output docs/Layer-Documentation.md \
  --csv data/layer-analysis.csv
```

## 🛠️ Utility Scripts

The `/scripts` directory provides powerful automation tools:

| Script | Purpose | Key Features |
|--------|---------|--------------|
| **`clean_qgis_for_git.py`** | 🔒 **Security** | Removes credentials before Git commits |
| **`qgis_handling.py`** | ⚙️ **Project Management** | Password restoration, datasource operations |
| **`install_hooks.py`** | 🔧 **Setup** | Installs Git hooks for credential protection |
| **`download_data.py`** | 📥 **Data Management** | Downloads Natural Earth test datasets |
| **`document_qgis_layers.py`** | 📚 **Documentation** | Generates comprehensive layer documentation |

### 🔒 Security Features
- **Automatic credential removal** before Git commits
- **Environment variable integration** for sensitive data
- **Pre-commit hooks** to prevent credential leaks
- **Password restoration** from environment variables

### ⚙️ Core Operations
- **Datasource extraction and replacement**
- **URL encoding for special characters** 
- **Layer filtering by datasource patterns**
- **Batch processing capabilities**

## 💻 Usage Examples

### 🔐 Credential Management
#### 🔐 Clean Projects Before Committing
```bash
# Clean all QGIS files in data directory (recommended before commits)
python3 scripts/clean_qgis_for_git.py -d ./data -v

# Clean specific project file
python3 scripts/clean_qgis_for_git.py -f ./data/Topo_2025.qgs -v
```

#### 🔑 Restore Credentials for Development
```bash
# Restore passwords from environment variables
python3 scripts/qgis_handling.py --reinsert-passwords -v

# Restore specific project
python3 scripts/qgis_handling.py --reinsert-passwords -f ./data/Topo_2025.qgs -v
```

### 📥 Development Data Setup
#### 🌍 Natural Earth Test Data (Optional)
Download Natural Earth datasets for development and testing:

```bash
# 📦 Download all test datasets (countries, lakes, boundaries)
python3 scripts/download_data.py -v

# 🎯 Download specific datasets only
python3 scripts/download_data.py -s countries lakes -v

# 🔄 Force redownload and conversion to FlatGeobuf
python3 scripts/download_data.py --force -v
```

> **⚠️ Note**: Requires GDAL/OGR tools for FlatGeobuf conversion. Install with: `conda install gdal` or `apt-get install gdal-bin`

## 🏗️ Development Workflow

### 🔄 Recommended Development Process
1. **Pull latest changes**: `git pull origin main`
2. **Clean credentials**: `python3 scripts/clean_qgis_for_git.py -d ./data -v`
3. **Restore passwords**: `python3 scripts/qgis_handling.py --reinsert-passwords -v`
4. **Work in QGIS**: Make your changes
5. **Clean before commit**: Pre-commit hook automatically runs
6. **Commit and push**: `git add . && git commit -m "Description" && git push`

### 🛡️ Security Best Practices
- **Never commit credentials** - Use environment variables
- **Install Git hooks** - Automatic credential checking
- **Use secure connections** - HTTPS/SSL for data sources
- **Review changes** - Check diffs before committing

### 🧪 Testing
- **Use test projects** - `enkel.qgs` and `earth.qgs` for experiments
- **Validate data sources** - Check all connections work
- **Test scale ranges** - Verify layer visibility at different scales
- **Performance testing** - Monitor rendering speed with large datasets

### 🔗 Data Sources
- **🏛️ Norwegian Mapping Authority (Kartverket)** - Primary data provider
- **🌍 Natural Earth** - International context (development only)

## 📚 Resources & Links

### 📖 Documentation
- **[🗺️ Full Layer Documentation](docs/Topo_2025.md)** - Complete technical specifications
- **[QGIS Documentation](https://docs.qgis.org/)** - Official QGIS user guides
- **[Norwegian Mapping Authority](https://kartverket.no/)** - Data provider information

### 🎨 Cartographic Resources  
- **[Cartographic Guidelines](https://kartverket.no/en/geodata)** - Norwegian mapping standards

### 🔧 Development Tools
- **[QGIS Server](https://docs.qgis.org/3.28/en/docs/server_manual/)** - Web map services
- **[PyQGIS Documentation](https://qgis.org/pyqgis/)** - Python automation
- **[GDAL/OGR](https://gdal.org/)** - Geospatial data processing

---

**📍 Repository**: [github.com/your-org/tnt-topo](https://github.com/your-org/tnt-topo)  
**📧 Contact**: TNT Topographic Team  
**📅 Last Updated**: June 2025  
**🏷️ Version**: 2025.1